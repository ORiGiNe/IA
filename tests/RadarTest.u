requireFile("../core/Sonar.u");
requireFile("../core/Radar.u");

var log = Logger.new("main")|;

log.log << "Start"|;

var g = UGaop.new("/dev/ttyACM0");
var s1 = UCapteur.new(1,g);
var s2 = UCapteur.new(2,g);
var s3 = UCapteur.new(3,g);
var s4 = UCapteur.new(4,g);
var s5 = UCapteur.new(5,g);
var s6 = UCapteur.new(6,g);
var s7 = UCapteur.new(7,g);
g.initialise;

var ss1 = Sonar.new(s1,180,35);
var ss2 = Sonar.new(s2,270,35);
var ss3 = Sonar.new(s3,0,35);
var ss4 = Sonar.new(s4,90,35);
var ss5 = Sonar.new(s5,315,35);
var ss6 = Sonar.new(s6,180,35);
var ss7 = Sonar.new(s7,45,35);

/*var s = Object.new|;
function s.get
{
    return 30
}|;*/

var opponent = Event.new|;

var r = Radar.new([ss1,ss2,ss3,ss4,ss5,ss6,ss7],opponent)|;

log.log << "mise à jour de posMonitored"|;
r.posMonitored = [0]|;
r.delay = 0.1s|;

var state = "normal"|;

at (opponent?)
    if (state != "crisis") {
		    state = "crisis";
		    log.log << "OPPONENT !!!";

		    l: every (1s) {
			    log.log << "working"
		    },

		    sleep(2);
		    l.stop;
            log.log << "work done";
		    state = "normal"
    };

sleep(20);
r.posMonitored << 90;


/*sleep(2s);
s.get = function {
    return 4
}|;

sleep(4s);
s.get = function {
    return 40
}|;

sleep(4s);
s.get = function {
    return 4
}|;

sleep(1);
s.get = function {
    return 35
}|;

sleep(3);
log.log << "mise à jour de posMonitored"|;
r.posMonitored = [70]|;
s.get = function {
    return 10
}|;

sleep(3);
log.log << "mise à jour de posMonitored"|;
r.posMonitored << 20|;

sleep(4);
s.get = function {
    return 42
}|;

sleep(6);
log.log << "STOP !!!"|;
r.stop;

System.shutdown;*/
