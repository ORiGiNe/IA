class Radar {
	var _sonars = []; // liste des couples (sonar, position)
	var _sonarsMonitored = []; // liste des sonars surveillées
	var _monitorLoop = Tag.new("Monitor Loop"); // tag contenant la loop de monitoring
    var _monitorLoop.update = _monitorLoop.clone; // tag fils
	
	var event; // événement émis en cas d'approche
	var posMonitored = []; // liste des positions surveillées
    var _oldPosMonitored = []; // pour réagir lors d'un changement de valeur
	var delay = 0.03s; // delai entre deux check des sonars
	var distMin = 40; // distance minimale à l'adversaire que l'on accepte

	var _logRadar = Logger.new("Radar");
	var _logLoop = Logger.new("Monitoring");
	
	// constructeur
	function init (sonars) {
        _sonars = sonars;
		
		// dès que les positions surveillées changent,
        // on met à jour la liste des sonars surveillés
		at (posMonitored != _oldPosMonitored)
		{
			_logRadar.log << "posMonitored mis à jour : " + posMonitored;
			_logRadar.log << "recalcule des sonars à monitorer";
			
			_monitorLoop.stop;
            posMonitored = posMonitored.sort;
			_sonarsMonitored = [];

            // on parcourt toutes les positions surveillées
            for (var pos in posMonitored) {
                // le groupe de sonar a surveiller pour cette position
                // le premier est le sonar principal, les suivants servent à redonder
                var sonarsGroup = [];

                // on cherche tous les sonars proches de la position
                for (var sonar in _sonars)
                    if (sonar.min <= pos && pos <= sonar.max)
                        sonarsGroup << sonar;

                if (!sonarsGroup.empty) {
                    // on trie cette liste en mettant le plus proche en premier
                    sonarsGroup = sonarsGroup.sort(
                        function (a, b) {
                            (a.pos - pos).abs  < (b.pos - pos).abs
                        });

                    _sonarsMonitored << sonarsGroup
                };
            };

            _oldPosMonitored = posMonitored.clone;
			_logRadar.log << "_sonarMonitored : " + _sonarsMonitored.asString;
    		_monitor
		};

		_logRadar.log << "init terminé"
	};

	
	// fonction principale, bloquante (à lancer un tâche de fond)
	function _monitor {
		at (_monitorLoop.leave?)
			_logLoop.log << "They want me to stop";

		_monitorLoop:
		{
			for& (var sonar in _sonarsMonitored) {
				_logLoop.log << "Début de le surveillance";
					
				var distance = sonar[0].get;

				_logLoop.log << "loop de mise à jour des valeurs";

                _monitorLoop.update:
    				every (delay) {
	    				distance = sonar[0].get;
		    			_logLoop.log << "distance " + sonar[0] + " = " + distance
			    	},

				_logLoop.log << "démarrage du at";
				whenever (distance < distMin) {
                    // le sonar principale a détecté un adversaire
                    // on vérifie avec les sonars redondants

                    // nécéssaire, je ne sais pas pourquoi
                    var distMin = distMin;
                    if (sonar.foldl(function (a, b) { a && (b.get < distMin) }, true)) {
	    				event!
                    };
				}
			};
		};
	};


	function stop {
        _logLoop.log << "I want you to stop"; 
		_monitorLoop.stop;
	};
}|;
