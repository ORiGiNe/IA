class Radar {
	var sonars = List.new; // liste des couples (sonar, position)
	var posMonitored; // liste des positions surveillées
	var event; // événement émis en cas d'approche
	var delay = 0.03s; // delai entre deux check des sonars
	var range = 20; // distance minimale à l'adversaire que l'on accepte
	var tmp;
	
	
	function init (sonarsList, positions, event)
	{
		// on effectue ici un hack assez dégueu
		// obligatoire cependant car on n'a pas
		// accès à this.sonar dans le eachi()
		sonarsList.eachi(
			function (v, i)
			{
				sonarsList[i] =  Pair.new(v, positions[i])
			});
		sonars = sonarsList;
		this.event = event
	};
	
	function monitor
	{
		//every (delay)
		//{
			for& (var sonar in this.sonars)
			{
				echo("Début de le surveillance");
				this.tmp = sonar.first.get;
				every (delay)
				{
					this.tmp = sonar.first.get;
					echo("tmp = " + this.tmp.asString)
				},
                
                var e; 
				at (sonar.second in this.posMonitored && this.tmp < this.range)
				{
					//tmp = sonar.first.get|
					//echo(tmp);

					//if (tmp < this.range)
					//	event!(tmp, sonar.second);
					echo("ALERTE !");
					e = event.trigger;
				}
                onleave
                {
                    echo("FIN DE L'ALERTE");
                    e.stop;
                };
			};
		//};
	};
}|;

echo("Start");
//var g = UGaop.new("/dev/ttyUSB1");
//var s = UCapteur.new(4,g);
//g.initialise;

var s = Object.new|;
function s.get
{
    return 30
}|;

var opponent = Event.new|;

var r = Radar.new([s],["N"],opponent)|;
r.posMonitored = ["N"]|;
r.delay = 1s|;
r.monitor,

var state = "normal"|;
//every (0.2s) {
//	echo(s.get)
//},

at (opponent?)
    echo ("OPPONENT ???");

whenewheneverr (opponent? ~ 2s)
	if (state != "crisis")
	{
		state = "crisis";
		echo("OPPONENT !!!");

		l: every (1s) {
			echo("working")
		},

		sleep(2);
		l.stop;
        echo ("work done");
		state = "crisi"
	};

sleep(5s);
s.get = function {
    return 4
}|;

sleep(10s);
s.get = function {
    return 40
}|;

sleep(4s);
s.get = function {
    return 4
}|;

sleep(1);
s.get = function {
    return 35
}|;
